{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","App","state","date","visible","showModal","_this","setState","handleOk","e","console","log","handleCancel","handleChange","message","info","concat","format","this","Step","Steps","content","react_default","a","createElement","style","width","margin","date_picker","onChange","marginTop","popover","title","es_button","type","onClick","modal","onOk","onCancel","controls","steps","progressDot","current","description","p","navigator","mediaDevices","getUserMedia","audio","video","then","mediaStream","document","querySelector","srcObject","onloadedmetadata","play","catch","err","name","showVideo","React","Component","ReactDOM","render","src_App","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"8SAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DCRAC,6MACJC,MAAQ,CACNC,KAAM,KACNC,SAAS,KAGXC,UAAY,WACVC,EAAKC,SAAS,CACZH,SAAS,OAIbI,SAAW,SAACC,GACVC,QAAQC,IAAIF,GACZH,EAAKC,SAAS,CACZH,SAAS,OAIbQ,aAAe,SAACH,GACdC,QAAQC,IAAIF,GACZH,EAAKC,SAAS,CACZH,SAAS,OAIbS,aAAe,SAAAV,GACbW,IAAQC,KAAR,kBAAAC,OAA+Bb,EAAOA,EAAKc,OAAO,cAAgB,SAClEX,EAAKC,SAAS,CAAEJ,kFAGT,IACCA,EAASe,KAAKhB,MAAdC,KACFgB,EAAOC,IAAMD,KAEbE,EACNC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,qBAIJ,OACEF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,eAChCL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAYC,SAAUX,KAAKL,eAC3BS,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEK,UAAW,KAAzB,kBACkB3B,EAAOA,EAAKc,OAAO,cAAgB,QAErDK,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAASV,QAASA,EAASW,MAAM,SAC/BV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,KAAK,WAAb,aANJ,cASEZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,KAAK,UAAUC,QAASjB,KAAKb,WAArC,cAGJiB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEJ,MAAM,cACN5B,QAASc,KAAKhB,MAAME,QACpBiC,KAAMnB,KAAKV,SACX8B,SAAUpB,KAAKN,cAEfU,EAAAC,EAAAC,cAAA,SAAOe,SAAS,aAEhBjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,aAAW,EAACC,QAAS,GAC1BpB,EAAAC,EAAAC,cAACL,EAAD,CAAMa,MAAM,WAAWW,YAAY,2BACnCrB,EAAAC,EAAAC,cAACL,EAAD,CAAMa,MAAM,cAAcW,YAAY,2BACtCrB,EAAAC,EAAAC,cAACL,EAAD,CAAMa,MAAM,UAAUW,YAAY,4BAXtC,2CAqBJ,IAAIC,EAAIC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAMC,OAAO,IAElEL,EAAEM,KAAK,SAASC,GACd,IAAIF,EAAQG,SAASC,cAAc,SACnCJ,EAAMK,UAAUH,EAChBF,EAAMM,iBAAmB,SAAS9C,GAC/BwC,EAAMO,UAKXZ,EAAEa,MAAM,SAASC,GAAOhD,QAAQC,IAAI+C,EAAIC,oDAIxCzC,KAAK0C,mBA5FSC,IAAMC,WAgGxBC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASb,SAASc,eAAe,SDuB3C,kBAAmBrB,WACrBA,UAAUsB,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.2a9489df.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DatePicker, message } from \"antd\";\nimport { Popover, Button } from 'antd';\nimport { Modal, Steps } from 'antd';\n\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport * as serviceWorker from './serviceWorker';\n\nclass App extends React.Component {\n  state = {\n    date: null,\n    visible: true\n  };\n\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  }\n\n  handleOk = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  }\n\n  handleCancel = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  }\n\n  handleChange = date => {\n    message.info(`Selected Date: ${date ? date.format(\"YYYY-MM-DD\") : \"None\"}`);\n    this.setState({ date });\n  };\n\n  render() {\n    const { date } = this.state;\n    const Step = Steps.Step;\n\n    const content = (\n    <div>\n        <p>Content</p>\n        <p>Content</p>\n    </div>\n    );\n    \n    return (\n      <div style={{ width: 400, margin: \"100px auto\" }}>\n        <DatePicker onChange={this.handleChange} />\n        <div style={{ marginTop: 20 }}>\n          Selected Date: {date ? date.format(\"YYYY-MM-DD\") : \"None\"}\n        </div>\n        <Popover content={content} title=\"Title\">\n          <Button type=\"primary\">Hover me</Button>\n        </Popover>,\n        mountNode\n        <div>\n            <Button type=\"primary\" onClick={this.showModal}>\n                Open Modal\n            </Button>\n        <Modal\n          title=\"Basic Modal\"\n          visible={this.state.visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n        >\n          <video controls=\"controls\"></video>\n          \n          <Steps progressDot current={1}>\n            <Step title=\"Finished\" description=\"This is a description.\" />\n            <Step title=\"In Progress\" description=\"This is a description.\" />\n            <Step title=\"Waiting\" description=\"This is a description.\" />\n          </Steps>,\n        </Modal>\n        \n      </div>\n      </div>\n      \n    );\n  }\n  showVideo() {\n    let p = navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n\n    p.then(function(mediaStream) {\n      let video = document.querySelector('video');\n      video.srcObject=mediaStream;\n      video.onloadedmetadata = function(e) {\n         video.play();\n      };\n    });\n\n\n    p.catch(function(err) { console.log(err.name); });\n  }\n  \n  componentDidMount() {\n    this.showVideo();\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}